### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type CommentsComment {
  approvalStatus: String
  authorAvatar: String
  authorEmail: String
  authorId: String
  authorName: String
  authorUser: UsersPermissionsUserEntityResponse
  blockReason: String
  blocked: Boolean
  blockedThread: Boolean
  content: String!
  createdAt: DateTime
  isAdminComment: Boolean
  related: String
  removed: Boolean
  reports(filters: CommentsCommentReportFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentReportRelationResponseCollection
  threadOf: CommentsCommentEntityResponse
  updatedAt: DateTime
}

type CommentsCommentEntity {
  attributes: CommentsComment
  id: ID
}

type CommentsCommentEntityResponse {
  data: CommentsCommentEntity
}

type CommentsCommentEntityResponseCollection {
  data: [CommentsCommentEntity!]!
  meta: ResponseCollectionMeta!
}

input CommentsCommentFiltersInput {
  and: [CommentsCommentFiltersInput]
  approvalStatus: StringFilterInput
  authorAvatar: StringFilterInput
  authorEmail: StringFilterInput
  authorId: StringFilterInput
  authorName: StringFilterInput
  authorUser: UsersPermissionsUserFiltersInput
  blockReason: StringFilterInput
  blocked: BooleanFilterInput
  blockedThread: BooleanFilterInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isAdminComment: BooleanFilterInput
  not: CommentsCommentFiltersInput
  or: [CommentsCommentFiltersInput]
  related: StringFilterInput
  removed: BooleanFilterInput
  reports: CommentsCommentReportFiltersInput
  threadOf: CommentsCommentFiltersInput
  updatedAt: DateTimeFilterInput
}

input CommentsCommentInput {
  approvalStatus: String
  authorAvatar: String
  authorEmail: String
  authorId: String
  authorName: String
  authorUser: ID
  blockReason: String
  blocked: Boolean
  blockedThread: Boolean
  content: String
  isAdminComment: Boolean
  related: String
  removed: Boolean
  reports: [ID]
  threadOf: ID
}

type CommentsCommentRelationResponseCollection {
  data: [CommentsCommentEntity!]!
}

type CommentsCommentReport {
  content: String
  createdAt: DateTime
  reason: ENUM_COMMENTSCOMMENTREPORT_REASON!
  related: CommentsCommentEntityResponse
  resolved: Boolean
  updatedAt: DateTime
}

type CommentsCommentReportEntity {
  attributes: CommentsCommentReport
  id: ID
}

type CommentsCommentReportEntityResponse {
  data: CommentsCommentReportEntity
}

type CommentsCommentReportEntityResponseCollection {
  data: [CommentsCommentReportEntity!]!
  meta: ResponseCollectionMeta!
}

input CommentsCommentReportFiltersInput {
  and: [CommentsCommentReportFiltersInput]
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CommentsCommentReportFiltersInput
  or: [CommentsCommentReportFiltersInput]
  reason: StringFilterInput
  related: CommentsCommentFiltersInput
  resolved: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input CommentsCommentReportInput {
  content: String
  reason: ENUM_COMMENTSCOMMENTREPORT_REASON
  related: ID
  resolved: Boolean
}

type CommentsCommentReportRelationResponseCollection {
  data: [CommentsCommentReportEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMMENTSCOMMENTREPORT_REASON {
  BAD_LANGUAGE
  DISCRIMINATION
  OTHER
}

enum ENUM_MENUSMENUITEM_TARGET {
  blank
  parent
  self
  top
}

enum ENUM_REDIRECTSREDIRECT_TYPE {
  permanent
  temporary
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = CommentsComment | CommentsCommentReport | I18NLocale | MenusMenu | MenusMenuItem | PublisherAction | RedirectsRedirect | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type MenusMenu {
  createdAt: DateTime
  items(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemRelationResponseCollection
  slug: String!
  title: String!
  updatedAt: DateTime
}

type MenusMenuEntity {
  attributes: MenusMenu
  id: ID
}

type MenusMenuEntityResponse {
  data: MenusMenuEntity
}

type MenusMenuEntityResponseCollection {
  data: [MenusMenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenusMenuFiltersInput {
  and: [MenusMenuFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  items: MenusMenuItemFiltersInput
  not: MenusMenuFiltersInput
  or: [MenusMenuFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MenusMenuInput {
  items: [ID]
  slug: String
  title: String
}

type MenusMenuItem {
  createdAt: DateTime
  order: Int
  parent: MenusMenuItemEntityResponse
  root_menu: MenusMenuEntityResponse!
  target: ENUM_MENUSMENUITEM_TARGET
  title: String!
  updatedAt: DateTime
  url: String
}

type MenusMenuItemEntity {
  attributes: MenusMenuItem
  id: ID
}

type MenusMenuItemEntityResponse {
  data: MenusMenuItemEntity
}

type MenusMenuItemEntityResponseCollection {
  data: [MenusMenuItemEntity!]!
  meta: ResponseCollectionMeta!
}

input MenusMenuItemFiltersInput {
  and: [MenusMenuItemFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: MenusMenuItemFiltersInput
  or: [MenusMenuItemFiltersInput]
  order: IntFilterInput
  parent: MenusMenuItemFiltersInput
  root_menu: MenusMenuFiltersInput
  target: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input MenusMenuItemInput {
  order: Int
  parent: ID
  root_menu: ID
  target: ENUM_MENUSMENUITEM_TARGET
  title: String
  url: String
}

type MenusMenuItemRelationResponseCollection {
  data: [MenusMenuItemEntity!]!
}

type MenusMenuRelationResponseCollection {
  data: [MenusMenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCommentsComment(data: CommentsCommentInput!): CommentsCommentEntityResponse
  createCommentsCommentReport(data: CommentsCommentReportInput!): CommentsCommentReportEntityResponse
  createMenusMenu(data: MenusMenuInput!): MenusMenuEntityResponse
  createMenusMenuItem(data: MenusMenuItemInput!): MenusMenuItemEntityResponse
  createPublisherAction(data: PublisherActionInput!): PublisherActionEntityResponse
  createRedirectsRedirect(data: RedirectsRedirectInput!): RedirectsRedirectEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCommentsComment(id: ID!): CommentsCommentEntityResponse
  deleteCommentsCommentReport(id: ID!): CommentsCommentReportEntityResponse
  deleteMenusMenu(id: ID!): MenusMenuEntityResponse
  deleteMenusMenuItem(id: ID!): MenusMenuItemEntityResponse
  deletePublisherAction(id: ID!): PublisherActionEntityResponse
  deleteRedirectsRedirect(id: ID!): RedirectsRedirectEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCommentsComment(data: CommentsCommentInput!, id: ID!): CommentsCommentEntityResponse
  updateCommentsCommentReport(data: CommentsCommentReportInput!, id: ID!): CommentsCommentReportEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateMenusMenu(data: MenusMenuInput!, id: ID!): MenusMenuEntityResponse
  updateMenusMenuItem(data: MenusMenuItemInput!, id: ID!): MenusMenuItemEntityResponse
  updatePublisherAction(data: PublisherActionInput!, id: ID!): PublisherActionEntityResponse
  updateRedirectsRedirect(data: RedirectsRedirectInput!, id: ID!): RedirectsRedirectEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type PublisherAction {
  createdAt: DateTime
  entityId: Int
  entitySlug: String
  executeAt: DateTime
  mode: String
  updatedAt: DateTime
}

type PublisherActionEntity {
  attributes: PublisherAction
  id: ID
}

type PublisherActionEntityResponse {
  data: PublisherActionEntity
}

type PublisherActionEntityResponseCollection {
  data: [PublisherActionEntity!]!
  meta: ResponseCollectionMeta!
}

input PublisherActionFiltersInput {
  and: [PublisherActionFiltersInput]
  createdAt: DateTimeFilterInput
  entityId: IntFilterInput
  entitySlug: StringFilterInput
  executeAt: DateTimeFilterInput
  id: IDFilterInput
  mode: StringFilterInput
  not: PublisherActionFiltersInput
  or: [PublisherActionFiltersInput]
  updatedAt: DateTimeFilterInput
}

input PublisherActionInput {
  entityId: Int
  entitySlug: String
  executeAt: DateTime
  mode: String
}

type PublisherActionRelationResponseCollection {
  data: [PublisherActionEntity!]!
}

type Query {
  commentsComment(id: ID): CommentsCommentEntityResponse
  commentsCommentReport(id: ID): CommentsCommentReportEntityResponse
  commentsCommentReports(filters: CommentsCommentReportFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentReportEntityResponseCollection
  commentsComments(filters: CommentsCommentFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CommentsCommentEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menusMenu(id: ID): MenusMenuEntityResponse
  menusMenuItem(id: ID): MenusMenuItemEntityResponse
  menusMenuItems(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemEntityResponseCollection
  menusMenus(filters: MenusMenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuEntityResponseCollection
  publisherAction(id: ID): PublisherActionEntityResponse
  publisherActions(filters: PublisherActionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PublisherActionEntityResponseCollection
  redirectsRedirect(id: ID): RedirectsRedirectEntityResponse
  redirectsRedirects(filters: RedirectsRedirectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): RedirectsRedirectEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type RedirectsRedirect {
  createdAt: DateTime
  from: String!
  to: String!
  type: ENUM_REDIRECTSREDIRECT_TYPE!
  updatedAt: DateTime
}

type RedirectsRedirectEntity {
  attributes: RedirectsRedirect
  id: ID
}

type RedirectsRedirectEntityResponse {
  data: RedirectsRedirectEntity
}

type RedirectsRedirectEntityResponseCollection {
  data: [RedirectsRedirectEntity!]!
  meta: ResponseCollectionMeta!
}

input RedirectsRedirectFiltersInput {
  and: [RedirectsRedirectFiltersInput]
  createdAt: DateTimeFilterInput
  from: StringFilterInput
  id: IDFilterInput
  not: RedirectsRedirectFiltersInput
  or: [RedirectsRedirectFiltersInput]
  to: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input RedirectsRedirectInput {
  from: String
  to: String
  type: ENUM_REDIRECTSREDIRECT_TYPE
}

type RedirectsRedirectRelationResponseCollection {
  data: [RedirectsRedirectEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
